# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'

# Check required plugins
REQUIRED_PLUGINS_LIBVIRT = %w(vagrant-libvirt)
exit unless REQUIRED_PLUGINS_LIBVIRT.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    puts "The #{plugin} plugin is required. Please install it with:"
    puts "$ vagrant plugin install #{plugin}"
    false
  )
end

system("
    if [ #{ARGV[0]} = 'up' ]; then
        echo 'Creating ssh keys'
        ./key_handle.sh add
    elif [ #{ARGV[0]} = 'destroy' ]; then
	echo 'Removing ssh keys for deploy'
	./key_handle.sh del
    fi
")

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

  # If we use qemu we need to reset use session to false, otherwhise private networks can't be created
    config.vm.provider "libvirt" do |vm|
     vm.qemu_use_session = false
  end

    config.vm.define "webb" do |d1|
    d1.vm.box = "centos/7"
    d1.vm.synced_folder "./", "/vagrant"
    d1.vm.provision :shell, path: "bootstrap1.sh"
    d1.vm.network "private_network", type: "dhcp"
    d1.vm.provision "shell", inline: "echo '==================='; echo -n 'Detta är IP adressen för webb: '; echo $(ifconfig -a eth1 | grep inet | grep -v inet6 | awk '{print $2}'); echo '==================='"

  end

    config.vm.define "databas" do |d2|
    d2.vm.box = "centos/7"
    d2.vm.synced_folder "./", "/vagrant"
    d2.vm.provision :shell, path: "bootstrap2.sh"
    d2.vm.network "private_network", type: "dhcp"
    d2.vm.provision "shell", inline: "echo '==================='; echo -n 'Detta är IP adressen för databas: '; echo $(ifconfig -a eth1 | grep inet | grep -v inet6 | awk '{print $2}'); echo '==================='"
  
  end

    config.vm.define "almalinux" do |d3|
    d3.vm.box = "almalinux/8"
    d3.vm.synced_folder "./", "/vagrant"
    d3.vm.provision :shell, path: "bootstrap3.sh"
    d3.vm.network "private_network", type: "dhcp"
    d3.vm.provision "shell", inline: "echo '==================='; echo -n 'Detta är IP adressen för almalinux: '; echo $(ifconfig -a ens6 | grep inet | grep -v inet6 | awk '{print $2}'); echo '==================='"

  end
  
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  #
end
